// 1 算术右移 >> 低位溢出 符号位不变 并用符号位补溢出的高位 每右移一位就相当于除以2并向下取整
// 2 算术左移 << 符号位不变 低位补0 每左移一位就相当于乘以2
// 3 逻辑右移 >>> 也叫无符号右移 低位溢出 高位补0
public class BitOperator02 {
    public static void main(String[] args) {
        // 原码：10000000 00000000 00000000 00000001
        // 反码：11111111 11111111 11111111 11111110
        // 补码：11111111 11111111 11111111 11111111
        // 右移2位：11111111  11111111 11111111 11111111
        // 反码：11111111  11111111 11111111 11111110
        // 原码：10000000 00000000 00000000 00000001
        System.out.println(-1 >> 2);
        System.out.println(-1 / 2);

        // 左移2位：11111111 11111111 11111111 11111100
        // 反码：   11111111 11111111 11111111 11111011
        // 原码：   10000000 00000000 00000000 00000100  -4
        System.out.println(-1 << 2);

        // 补码：10000000 00000000 00000000 00000001
        // 反码：10000000 00000000 00000000 00000000
        // 原码：11111111 11111111 11111111 11111111 -2147483647

        // 补码：11100000 00000000 00000000 00000000
        // 反码：11011111 11111111 11111111 11111111
        // 原码：10100000 00000000 00000000 00000000 -536870912
        System.out.println(-2147483647 >> 2);

        byte b = 127;
        System.out.println(b << 2);

        // 原码：10000000 00000000 00000000 00000001
        // 反码：11111111 11111111 11111111 11111110
        // 补码：11111111 11111111 11111111 11111111
        // 逻辑右移2位：00111111  11111111 11111111 11111111
        // 反码：00111111  11111111 11111111 11111111
        // 原码：00111111  11111111 11111111 11111111 -1073741823
        System.out.println(-1 >>> 2);

    }
}